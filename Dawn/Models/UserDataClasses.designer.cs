#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dusk.Dawn.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DawnDB")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserEnchantment(UserEnchantment instance);
    partial void UpdateUserEnchantment(UserEnchantment instance);
    partial void DeleteUserEnchantment(UserEnchantment instance);
    partial void InsertUserEquipSet(UserEquipSet instance);
    partial void UpdateUserEquipSet(UserEquipSet instance);
    partial void DeleteUserEquipSet(UserEquipSet instance);
    partial void InsertUserRaid(UserRaid instance);
    partial void UpdateUserRaid(UserRaid instance);
    partial void DeleteUserRaid(UserRaid instance);
    partial void InsertUserRaidInstance(UserRaidInstance instance);
    partial void UpdateUserRaidInstance(UserRaidInstance instance);
    partial void DeleteUserRaidInstance(UserRaidInstance instance);
    partial void InsertUserRaidInstanceSpell(UserRaidInstanceSpell instance);
    partial void UpdateUserRaidInstanceSpell(UserRaidInstanceSpell instance);
    partial void DeleteUserRaidInstanceSpell(UserRaidInstanceSpell instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DawnConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserEnchantment> UserEnchantments
		{
			get
			{
				return this.GetTable<UserEnchantment>();
			}
		}
		
		public System.Data.Linq.Table<UserEnchantmentSpell> UserEnchantmentSpells
		{
			get
			{
				return this.GetTable<UserEnchantmentSpell>();
			}
		}
		
		public System.Data.Linq.Table<UserEquipSet> UserEquipSets
		{
			get
			{
				return this.GetTable<UserEquipSet>();
			}
		}
		
		public System.Data.Linq.Table<UserItem> UserItems
		{
			get
			{
				return this.GetTable<UserItem>();
			}
		}
		
		public System.Data.Linq.Table<UserRaid> UserRaids
		{
			get
			{
				return this.GetTable<UserRaid>();
			}
		}
		
		public System.Data.Linq.Table<UserRaidInstance> UserRaidInstances
		{
			get
			{
				return this.GetTable<UserRaidInstance>();
			}
		}
		
		public System.Data.Linq.Table<UserRaidInstanceSpell> UserRaidInstanceSpells
		{
			get
			{
				return this.GetTable<UserRaidInstanceSpell>();
			}
		}
		
		public System.Data.Linq.Table<UserRaidView> UserRaidViews
		{
			get
			{
				return this.GetTable<UserRaidView>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Level;
		
		private long _Experience;
		
		private long _Gold;
		
		private int _Attack;
		
		private int _Defense;
		
		private int _HP;
		
		private int _HPMax;
		
		private int _Leadership;
		
		private int _LeadershipMax;
		
		private System.Nullable<int> _ActiveEquipmentSetId;
		
		private bool _NewUser;
		
		private int _StatPoints;
		
		private EntitySet<UserEnchantment> _UserEnchantments;
		
		private EntitySet<UserEquipSet> _UserEquipSets;
		
		private EntitySet<UserRaid> _UserRaids;
		
		private EntityRef<UserEquipSet> _User_EquipSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnExperienceChanging(long value);
    partial void OnExperienceChanged();
    partial void OnCreditsChanging(long value);
    partial void OnCreditsChanged();
    partial void OnAttackChanging(int value);
    partial void OnAttackChanged();
    partial void OnDefenseChanging(int value);
    partial void OnDefenseChanged();
    partial void OnHPChanging(int value);
    partial void OnHPChanged();
    partial void OnHPMaxChanging(int value);
    partial void OnHPMaxChanged();
    partial void OnLeadershipChanging(int value);
    partial void OnLeadershipChanged();
    partial void OnLeadershipMaxChanging(int value);
    partial void OnLeadershipMaxChanged();
    partial void OnActiveEquipmentSetIdChanging(System.Nullable<int> value);
    partial void OnActiveEquipmentSetIdChanged();
    partial void OnNewUserChanging(bool value);
    partial void OnNewUserChanged();
    partial void OnStatPointsChanging(int value);
    partial void OnStatPointsChanged();
    #endregion
		
		public User()
		{
			this._UserEnchantments = new EntitySet<UserEnchantment>(new Action<UserEnchantment>(this.attach_UserEnchantments), new Action<UserEnchantment>(this.detach_UserEnchantments));
			this._UserEquipSets = new EntitySet<UserEquipSet>(new Action<UserEquipSet>(this.attach_UserEquipSets), new Action<UserEquipSet>(this.detach_UserEquipSets));
			this._UserRaids = new EntitySet<UserRaid>(new Action<UserRaid>(this.attach_UserRaids), new Action<UserRaid>(this.detach_UserRaids));
			this._User_EquipSet = default(EntityRef<UserEquipSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Experience", DbType="BigInt NOT NULL")]
		public long Experience
		{
			get
			{
				return this._Experience;
			}
			set
			{
				if ((this._Experience != value))
				{
					this.OnExperienceChanging(value);
					this.SendPropertyChanging();
					this._Experience = value;
					this.SendPropertyChanged("Experience");
					this.OnExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gold", DbType="BigInt NOT NULL")]
		public long Credits
		{
			get
			{
				return this._Gold;
			}
			set
			{
				if ((this._Gold != value))
				{
					this.OnCreditsChanging(value);
					this.SendPropertyChanging();
					this._Gold = value;
					this.SendPropertyChanged("Credits");
					this.OnCreditsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attack", DbType="Int NOT NULL")]
		public int Attack
		{
			get
			{
				return this._Attack;
			}
			set
			{
				if ((this._Attack != value))
				{
					this.OnAttackChanging(value);
					this.SendPropertyChanging();
					this._Attack = value;
					this.SendPropertyChanged("Attack");
					this.OnAttackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defense", DbType="Int NOT NULL")]
		public int Defense
		{
			get
			{
				return this._Defense;
			}
			set
			{
				if ((this._Defense != value))
				{
					this.OnDefenseChanging(value);
					this.SendPropertyChanging();
					this._Defense = value;
					this.SendPropertyChanged("Defense");
					this.OnDefenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HP", DbType="Int NOT NULL")]
		public int HP
		{
			get
			{
				return this._HP;
			}
			set
			{
				if ((this._HP != value))
				{
					this.OnHPChanging(value);
					this.SendPropertyChanging();
					this._HP = value;
					this.SendPropertyChanged("HP");
					this.OnHPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HPMax", DbType="Int NOT NULL")]
		public int HPMax
		{
			get
			{
				return this._HPMax;
			}
			set
			{
				if ((this._HPMax != value))
				{
					this.OnHPMaxChanging(value);
					this.SendPropertyChanging();
					this._HPMax = value;
					this.SendPropertyChanged("HPMax");
					this.OnHPMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Leadership", DbType="Int NOT NULL")]
		public int Leadership
		{
			get
			{
				return this._Leadership;
			}
			set
			{
				if ((this._Leadership != value))
				{
					this.OnLeadershipChanging(value);
					this.SendPropertyChanging();
					this._Leadership = value;
					this.SendPropertyChanged("Leadership");
					this.OnLeadershipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadershipMax", DbType="Int NOT NULL")]
		public int LeadershipMax
		{
			get
			{
				return this._LeadershipMax;
			}
			set
			{
				if ((this._LeadershipMax != value))
				{
					this.OnLeadershipMaxChanging(value);
					this.SendPropertyChanging();
					this._LeadershipMax = value;
					this.SendPropertyChanged("LeadershipMax");
					this.OnLeadershipMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveEquipmentSetId", DbType="Int")]
		public System.Nullable<int> ActiveEquipmentSetId
		{
			get
			{
				return this._ActiveEquipmentSetId;
			}
			set
			{
				if ((this._ActiveEquipmentSetId != value))
				{
					if (this._User_EquipSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActiveEquipmentSetIdChanging(value);
					this.SendPropertyChanging();
					this._ActiveEquipmentSetId = value;
					this.SendPropertyChanged("ActiveEquipmentSetId");
					this.OnActiveEquipmentSetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewUser", DbType="Bit NOT NULL")]
		public bool NewUser
		{
			get
			{
				return this._NewUser;
			}
			set
			{
				if ((this._NewUser != value))
				{
					this.OnNewUserChanging(value);
					this.SendPropertyChanging();
					this._NewUser = value;
					this.SendPropertyChanged("NewUser");
					this.OnNewUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatPoints", DbType="Int NOT NULL")]
		public int StatPoints
		{
			get
			{
				return this._StatPoints;
			}
			set
			{
				if ((this._StatPoints != value))
				{
					this.OnStatPointsChanging(value);
					this.SendPropertyChanging();
					this._StatPoints = value;
					this.SendPropertyChanged("StatPoints");
					this.OnStatPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEnchantment", Storage="_UserEnchantments", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserEnchantment> UserEnchantments
		{
			get
			{
				return this._UserEnchantments;
			}
			set
			{
				this._UserEnchantments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEquipSet", Storage="_UserEquipSets", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserEquipSet> UserEquipSets
		{
			get
			{
				return this._UserEquipSets;
			}
			set
			{
				this._UserEquipSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRaid", Storage="_UserRaids", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserRaid> UserRaids
		{
			get
			{
				return this._UserRaids;
			}
			set
			{
				this._UserRaids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserEquipSet_User", Storage="_User_EquipSet", ThisKey="ActiveEquipmentSetId", OtherKey="Id", IsForeignKey=true)]
		public UserEquipSet User_EquipSet
		{
			get
			{
				return this._User_EquipSet.Entity;
			}
			set
			{
				UserEquipSet previousValue = this._User_EquipSet.Entity;
				if (((previousValue != value) 
							|| (this._User_EquipSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User_EquipSet.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._User_EquipSet.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._ActiveEquipmentSetId = value.Id;
					}
					else
					{
						this._ActiveEquipmentSetId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User_EquipSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserEnchantments(UserEnchantment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserEnchantments(UserEnchantment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserEquipSets(UserEquipSet entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserEquipSets(UserEquipSet entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRaids(UserRaid entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRaids(UserRaid entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Enchantment")]
	public partial class UserEnchantment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _ItemId;
		
		private int _Attack;
		
		private int _Defense;
		
		private int _Perception;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnAttackChanging(int value);
    partial void OnAttackChanged();
    partial void OnDefenseChanging(int value);
    partial void OnDefenseChanged();
    partial void OnPerceptionChanging(int value);
    partial void OnPerceptionChanged();
    #endregion
		
		public UserEnchantment()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attack", DbType="Int NOT NULL")]
		public int Attack
		{
			get
			{
				return this._Attack;
			}
			set
			{
				if ((this._Attack != value))
				{
					this.OnAttackChanging(value);
					this.SendPropertyChanging();
					this._Attack = value;
					this.SendPropertyChanged("Attack");
					this.OnAttackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defense", DbType="Int NOT NULL")]
		public int Defense
		{
			get
			{
				return this._Defense;
			}
			set
			{
				if ((this._Defense != value))
				{
					this.OnDefenseChanging(value);
					this.SendPropertyChanging();
					this._Defense = value;
					this.SendPropertyChanged("Defense");
					this.OnDefenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Perception", DbType="Int NOT NULL")]
		public int Perception
		{
			get
			{
				return this._Perception;
			}
			set
			{
				if ((this._Perception != value))
				{
					this.OnPerceptionChanging(value);
					this.SendPropertyChanging();
					this._Perception = value;
					this.SendPropertyChanged("Perception");
					this.OnPerceptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEnchantment", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserEnchantments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserEnchantments.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Enchantment_Spell")]
	public partial class UserEnchantmentSpell
	{
		
		private int _UserEnchantmentId;
		
		private int _SpellId;
		
		public UserEnchantmentSpell()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEnchantmentId", DbType="Int NOT NULL")]
		public int UserEnchantmentId
		{
			get
			{
				return this._UserEnchantmentId;
			}
			set
			{
				if ((this._UserEnchantmentId != value))
				{
					this._UserEnchantmentId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpellId", DbType="Int NOT NULL")]
		public int SpellId
		{
			get
			{
				return this._SpellId;
			}
			set
			{
				if ((this._SpellId != value))
				{
					this._SpellId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_EquipSet")]
	public partial class UserEquipSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private string _Name;
		
		private bool _CanDelete;
		
		private System.Nullable<int> _HelmetId;
		
		private System.Nullable<int> _ChestId;
		
		private System.Nullable<int> _LegsId;
		
		private System.Nullable<int> _BootsId;
		
		private System.Nullable<int> _HandsId;
		
		private System.Nullable<int> _MainHandId;
		
		private System.Nullable<int> _OffHandId;
		
		private System.Nullable<int> _RingId;
		
		private System.Nullable<int> _MountId;
		
		private EntitySet<User> _Users;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCanDeleteChanging(bool value);
    partial void OnCanDeleteChanged();
    partial void OnHelmetIdChanging(System.Nullable<int> value);
    partial void OnHelmetIdChanged();
    partial void OnChestIdChanging(System.Nullable<int> value);
    partial void OnChestIdChanged();
    partial void OnLegsIdChanging(System.Nullable<int> value);
    partial void OnLegsIdChanged();
    partial void OnBootsIdChanging(System.Nullable<int> value);
    partial void OnBootsIdChanged();
    partial void OnHandsIdChanging(System.Nullable<int> value);
    partial void OnHandsIdChanged();
    partial void OnMainHandIdChanging(System.Nullable<int> value);
    partial void OnMainHandIdChanged();
    partial void OnOffHandIdChanging(System.Nullable<int> value);
    partial void OnOffHandIdChanged();
    partial void OnRingIdChanging(System.Nullable<int> value);
    partial void OnRingIdChanged();
    partial void OnMountIdChanging(System.Nullable<int> value);
    partial void OnMountIdChanged();
    #endregion
		
		public UserEquipSet()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanDelete", DbType="Bit NOT NULL")]
		public bool CanDelete
		{
			get
			{
				return this._CanDelete;
			}
			set
			{
				if ((this._CanDelete != value))
				{
					this.OnCanDeleteChanging(value);
					this.SendPropertyChanging();
					this._CanDelete = value;
					this.SendPropertyChanged("CanDelete");
					this.OnCanDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HelmetId", DbType="Int")]
		public System.Nullable<int> HelmetId
		{
			get
			{
				return this._HelmetId;
			}
			set
			{
				if ((this._HelmetId != value))
				{
					this.OnHelmetIdChanging(value);
					this.SendPropertyChanging();
					this._HelmetId = value;
					this.SendPropertyChanged("HelmetId");
					this.OnHelmetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChestId", DbType="Int")]
		public System.Nullable<int> ChestId
		{
			get
			{
				return this._ChestId;
			}
			set
			{
				if ((this._ChestId != value))
				{
					this.OnChestIdChanging(value);
					this.SendPropertyChanging();
					this._ChestId = value;
					this.SendPropertyChanged("ChestId");
					this.OnChestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LegsId", DbType="Int")]
		public System.Nullable<int> LegsId
		{
			get
			{
				return this._LegsId;
			}
			set
			{
				if ((this._LegsId != value))
				{
					this.OnLegsIdChanging(value);
					this.SendPropertyChanging();
					this._LegsId = value;
					this.SendPropertyChanged("LegsId");
					this.OnLegsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BootsId", DbType="Int")]
		public System.Nullable<int> BootsId
		{
			get
			{
				return this._BootsId;
			}
			set
			{
				if ((this._BootsId != value))
				{
					this.OnBootsIdChanging(value);
					this.SendPropertyChanging();
					this._BootsId = value;
					this.SendPropertyChanged("BootsId");
					this.OnBootsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandsId", DbType="Int")]
		public System.Nullable<int> HandsId
		{
			get
			{
				return this._HandsId;
			}
			set
			{
				if ((this._HandsId != value))
				{
					this.OnHandsIdChanging(value);
					this.SendPropertyChanging();
					this._HandsId = value;
					this.SendPropertyChanged("HandsId");
					this.OnHandsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainHandId", DbType="Int")]
		public System.Nullable<int> MainHandId
		{
			get
			{
				return this._MainHandId;
			}
			set
			{
				if ((this._MainHandId != value))
				{
					this.OnMainHandIdChanging(value);
					this.SendPropertyChanging();
					this._MainHandId = value;
					this.SendPropertyChanged("MainHandId");
					this.OnMainHandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OffHandId", DbType="Int")]
		public System.Nullable<int> OffHandId
		{
			get
			{
				return this._OffHandId;
			}
			set
			{
				if ((this._OffHandId != value))
				{
					this.OnOffHandIdChanging(value);
					this.SendPropertyChanging();
					this._OffHandId = value;
					this.SendPropertyChanged("OffHandId");
					this.OnOffHandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RingId", DbType="Int")]
		public System.Nullable<int> RingId
		{
			get
			{
				return this._RingId;
			}
			set
			{
				if ((this._RingId != value))
				{
					this.OnRingIdChanging(value);
					this.SendPropertyChanging();
					this._RingId = value;
					this.SendPropertyChanged("RingId");
					this.OnRingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MountId", DbType="Int")]
		public System.Nullable<int> MountId
		{
			get
			{
				return this._MountId;
			}
			set
			{
				if ((this._MountId != value))
				{
					this.OnMountIdChanging(value);
					this.SendPropertyChanging();
					this._MountId = value;
					this.SendPropertyChanged("MountId");
					this.OnMountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserEquipSet_User", Storage="_Users", ThisKey="Id", OtherKey="ActiveEquipmentSetId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEquipSet", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserEquipSets.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserEquipSets.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.User_EquipSet = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.User_EquipSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Item")]
	public partial class UserItem
	{
		
		private int _UserID;
		
		private int _ItemID;
		
		private int _Count;
		
		public UserItem()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this._ItemID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this._Count = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Raid")]
	public partial class UserRaid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private long _RaidInstanceId;
		
		private EntityRef<User> _User;
		
		private EntityRef<UserRaidInstance> _UserRaidInstance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRaidInstanceIdChanging(long value);
    partial void OnRaidInstanceIdChanged();
    #endregion
		
		public UserRaid()
		{
			this._User = default(EntityRef<User>);
			this._UserRaidInstance = default(EntityRef<UserRaidInstance>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaidInstanceId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long RaidInstanceId
		{
			get
			{
				return this._RaidInstanceId;
			}
			set
			{
				if ((this._RaidInstanceId != value))
				{
					if (this._UserRaidInstance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaidInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._RaidInstanceId = value;
					this.SendPropertyChanged("RaidInstanceId");
					this.OnRaidInstanceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRaid", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRaids.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRaids.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRaidInstance_UserRaid", Storage="_UserRaidInstance", ThisKey="RaidInstanceId", OtherKey="Id", IsForeignKey=true)]
		public UserRaidInstance UserRaidInstance
		{
			get
			{
				return this._UserRaidInstance.Entity;
			}
			set
			{
				UserRaidInstance previousValue = this._UserRaidInstance.Entity;
				if (((previousValue != value) 
							|| (this._UserRaidInstance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRaidInstance.Entity = null;
						previousValue.UserRaids.Remove(this);
					}
					this._UserRaidInstance.Entity = value;
					if ((value != null))
					{
						value.UserRaids.Add(this);
						this._RaidInstanceId = value.Id;
					}
					else
					{
						this._RaidInstanceId = default(long);
					}
					this.SendPropertyChanged("UserRaidInstance");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Raid_Instance")]
	public partial class UserRaidInstance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private int _RaidId;
		
		private int _TierId;
		
		private System.DateTime _SpawnTime;
		
		private System.Nullable<long> _Health;
		
		private bool _Finished;
		
		private int _OwnerId;
		
		private EntitySet<UserRaid> _UserRaids;
		
		private EntityRef<UserRaidInstanceSpell> _UserRaidInstanceSpell;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnRaidIdChanging(int value);
    partial void OnRaidIdChanged();
    partial void OnTierIdChanging(int value);
    partial void OnTierIdChanged();
    partial void OnSpawnTimeChanging(System.DateTime value);
    partial void OnSpawnTimeChanged();
    partial void OnHealthChanging(System.Nullable<long> value);
    partial void OnHealthChanged();
    partial void OnFinishedChanging(bool value);
    partial void OnFinishedChanged();
    partial void OnOwnerIdChanging(int value);
    partial void OnOwnerIdChanged();
    #endregion
		
		public UserRaidInstance()
		{
			this._UserRaids = new EntitySet<UserRaid>(new Action<UserRaid>(this.attach_UserRaids), new Action<UserRaid>(this.detach_UserRaids));
			this._UserRaidInstanceSpell = default(EntityRef<UserRaidInstanceSpell>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaidId", DbType="Int NOT NULL")]
		public int RaidId
		{
			get
			{
				return this._RaidId;
			}
			set
			{
				if ((this._RaidId != value))
				{
					this.OnRaidIdChanging(value);
					this.SendPropertyChanging();
					this._RaidId = value;
					this.SendPropertyChanged("RaidId");
					this.OnRaidIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TierId", DbType="Int NOT NULL")]
		public int TierId
		{
			get
			{
				return this._TierId;
			}
			set
			{
				if ((this._TierId != value))
				{
					this.OnTierIdChanging(value);
					this.SendPropertyChanging();
					this._TierId = value;
					this.SendPropertyChanged("TierId");
					this.OnTierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpawnTime", DbType="DateTime NOT NULL")]
		public System.DateTime SpawnTime
		{
			get
			{
				return this._SpawnTime;
			}
			set
			{
				if ((this._SpawnTime != value))
				{
					this.OnSpawnTimeChanging(value);
					this.SendPropertyChanging();
					this._SpawnTime = value;
					this.SendPropertyChanged("SpawnTime");
					this.OnSpawnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Health", DbType="BigInt")]
		public System.Nullable<long> Health
		{
			get
			{
				return this._Health;
			}
			set
			{
				if ((this._Health != value))
				{
					this.OnHealthChanging(value);
					this.SendPropertyChanging();
					this._Health = value;
					this.SendPropertyChanged("Health");
					this.OnHealthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Finished", DbType="Bit NOT NULL")]
		public bool Finished
		{
			get
			{
				return this._Finished;
			}
			set
			{
				if ((this._Finished != value))
				{
					this.OnFinishedChanging(value);
					this.SendPropertyChanging();
					this._Finished = value;
					this.SendPropertyChanged("Finished");
					this.OnFinishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerId", DbType="Int NOT NULL")]
		public int OwnerId
		{
			get
			{
				return this._OwnerId;
			}
			set
			{
				if ((this._OwnerId != value))
				{
					this.OnOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerId = value;
					this.SendPropertyChanged("OwnerId");
					this.OnOwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRaidInstance_UserRaid", Storage="_UserRaids", ThisKey="Id", OtherKey="RaidInstanceId")]
		public EntitySet<UserRaid> UserRaids
		{
			get
			{
				return this._UserRaids;
			}
			set
			{
				this._UserRaids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRaidInstance_UserRaidInstanceSpell", Storage="_UserRaidInstanceSpell", ThisKey="Id", OtherKey="InstanceId", IsUnique=true, IsForeignKey=false)]
		public UserRaidInstanceSpell UserRaidInstanceSpell
		{
			get
			{
				return this._UserRaidInstanceSpell.Entity;
			}
			set
			{
				UserRaidInstanceSpell previousValue = this._UserRaidInstanceSpell.Entity;
				if (((previousValue != value) 
							|| (this._UserRaidInstanceSpell.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRaidInstanceSpell.Entity = null;
						previousValue.UserRaidInstance = null;
					}
					this._UserRaidInstanceSpell.Entity = value;
					if ((value != null))
					{
						value.UserRaidInstance = this;
					}
					this.SendPropertyChanged("UserRaidInstanceSpell");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRaids(UserRaid entity)
		{
			this.SendPropertyChanging();
			entity.UserRaidInstance = this;
		}
		
		private void detach_UserRaids(UserRaid entity)
		{
			this.SendPropertyChanging();
			entity.UserRaidInstance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Raid_Instance_Spell")]
	public partial class UserRaidInstanceSpell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _InstanceId;
		
		private int _SpellId;
		
		private int _UserId;
		
		private EntityRef<UserRaidInstance> _UserRaidInstance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(long value);
    partial void OnInstanceIdChanged();
    partial void OnSpellIdChanging(int value);
    partial void OnSpellIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public UserRaidInstanceSpell()
		{
			this._UserRaidInstance = default(EntityRef<UserRaidInstance>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstanceId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._UserRaidInstance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpellId", DbType="Int NOT NULL")]
		public int SpellId
		{
			get
			{
				return this._SpellId;
			}
			set
			{
				if ((this._SpellId != value))
				{
					this.OnSpellIdChanging(value);
					this.SendPropertyChanging();
					this._SpellId = value;
					this.SendPropertyChanged("SpellId");
					this.OnSpellIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRaidInstance_UserRaidInstanceSpell", Storage="_UserRaidInstance", ThisKey="InstanceId", OtherKey="Id", IsForeignKey=true)]
		public UserRaidInstance UserRaidInstance
		{
			get
			{
				return this._UserRaidInstance.Entity;
			}
			set
			{
				UserRaidInstance previousValue = this._UserRaidInstance.Entity;
				if (((previousValue != value) 
							|| (this._UserRaidInstance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRaidInstance.Entity = null;
						previousValue.UserRaidInstanceSpell = null;
					}
					this._UserRaidInstance.Entity = value;
					if ((value != null))
					{
						value.UserRaidInstanceSpell = this;
						this._InstanceId = value.Id;
					}
					else
					{
						this._InstanceId = default(long);
					}
					this.SendPropertyChanged("UserRaidInstance");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRaidView")]
	public partial class UserRaidView
	{
		
		private int _UserId;
		
		private long _RaidInstanceId;
		
		private int _RaidId;
		
		private int _TierId;
		
		private long _Damage;
		
		private System.Nullable<long> _Health;
		
		private System.DateTime _SpawnTime;
		
		private bool _Finished;
		
		private bool _Public;
		
		private int _OwnerId;
		
		public UserRaidView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaidInstanceId", DbType="BigInt NOT NULL")]
		public long RaidInstanceId
		{
			get
			{
				return this._RaidInstanceId;
			}
			set
			{
				if ((this._RaidInstanceId != value))
				{
					this._RaidInstanceId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaidId", DbType="Int NOT NULL")]
		public int RaidId
		{
			get
			{
				return this._RaidId;
			}
			set
			{
				if ((this._RaidId != value))
				{
					this._RaidId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TierId", DbType="Int NOT NULL")]
		public int TierId
		{
			get
			{
				return this._TierId;
			}
			set
			{
				if ((this._TierId != value))
				{
					this._TierId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Damage", DbType="BigInt NOT NULL")]
		public long Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				if ((this._Damage != value))
				{
					this._Damage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Health", DbType="BigInt")]
		public System.Nullable<long> Health
		{
			get
			{
				return this._Health;
			}
			set
			{
				if ((this._Health != value))
				{
					this._Health = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpawnTime", DbType="DateTime NOT NULL")]
		public System.DateTime SpawnTime
		{
			get
			{
				return this._SpawnTime;
			}
			set
			{
				if ((this._SpawnTime != value))
				{
					this._SpawnTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Finished", DbType="Bit NOT NULL")]
		public bool Finished
		{
			get
			{
				return this._Finished;
			}
			set
			{
				if ((this._Finished != value))
				{
					this._Finished = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Public]", Storage="_Public", DbType="Bit NOT NULL")]
		public bool Public
		{
			get
			{
				return this._Public;
			}
			set
			{
				if ((this._Public != value))
				{
					this._Public = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerId", DbType="Int NOT NULL")]
		public int OwnerId
		{
			get
			{
				return this._OwnerId;
			}
			set
			{
				if ((this._OwnerId != value))
				{
					this._OwnerId = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
